// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/lpt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LearningPlanTrackerServiceClient is the client API for LearningPlanTrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningPlanTrackerServiceClient interface {
	AddCourse(ctx context.Context, in *AddCourseRequest, opts ...grpc.CallOption) (*AddCourseResponse, error)
	AddTopic(ctx context.Context, in *AddTopicRequest, opts ...grpc.CallOption) (*AddTopicResponse, error)
	AddExercise(ctx context.Context, in *AddExerciseRequest, opts ...grpc.CallOption) (*AddExerciseResponse, error)
	GetCourses(ctx context.Context, in *GetCoursesRequest, opts ...grpc.CallOption) (*GetCoursesResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	GetUsersByRole(ctx context.Context, in *GetUsersByRoleRequest, opts ...grpc.CallOption) (*GetUsersByRoleResponse, error)
	GetCurrentAssignments(ctx context.Context, in *GetCurrentAssignmentsRequest, opts ...grpc.CallOption) (*GetCurrentAssignmentsResponse, error)
	PostAssignment(ctx context.Context, in *PostAssignmentRequest, opts ...grpc.CallOption) (*PostAssignmentResponse, error)
	GetAssignedCourses(ctx context.Context, in *GetAssignedCoursesRequest, opts ...grpc.CallOption) (*GetAssignedCoursesResponse, error)
	GetAssignedCourseDetailsByCourseId(ctx context.Context, in *GetAssignedCourseDetailsByCourseIdRequest, opts ...grpc.CallOption) (*GetAssignedCourseDetailsByCourseIdResponse, error)
	GetAssignedCourseAndMentorDetails(ctx context.Context, in *GetAssignedCourseAndMentorDetailsRequest, opts ...grpc.CallOption) (*GetAssignedCourseAndMentorDetailsResponse, error)
	PostExercise(ctx context.Context, in *PostExerciseRequest, opts ...grpc.CallOption) (*PostExerciseResponse, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error)
	GetTotalNoOfExercices(ctx context.Context, in *GetTotalNoOfExercicesRequest, opts ...grpc.CallOption) (*GetTotalNoOfExercicesResponse, error)
	GetSubmittedExercisesCount(ctx context.Context, in *GetSubmittedExercisesCountRequest, opts ...grpc.CallOption) (*GetSubmittedExercisesCountResponse, error)
	GetAssignedMenteesAndCourses(ctx context.Context, in *GetAssignedMenteesAndCoursesRequest, opts ...grpc.CallOption) (*GetAssignedMenteesAndCoursesResponse, error)
	GetAssignedMenteeAndCourseDetails(ctx context.Context, in *GetAssignedMenteeAndCourseDetailsRequest, opts ...grpc.CallOption) (*GetAssignedMenteeAndCourseDetailsResponse, error)
	GetSubmittedExercises(ctx context.Context, in *GetSubmittedExercisesRequest, opts ...grpc.CallOption) (*GetSubmittedExercisesResponse, error)
}

type learningPlanTrackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningPlanTrackerServiceClient(cc grpc.ClientConnInterface) LearningPlanTrackerServiceClient {
	return &learningPlanTrackerServiceClient{cc}
}

func (c *learningPlanTrackerServiceClient) AddCourse(ctx context.Context, in *AddCourseRequest, opts ...grpc.CallOption) (*AddCourseResponse, error) {
	out := new(AddCourseResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/AddCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) AddTopic(ctx context.Context, in *AddTopicRequest, opts ...grpc.CallOption) (*AddTopicResponse, error) {
	out := new(AddTopicResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/AddTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) AddExercise(ctx context.Context, in *AddExerciseRequest, opts ...grpc.CallOption) (*AddExerciseResponse, error) {
	out := new(AddExerciseResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/AddExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetCourses(ctx context.Context, in *GetCoursesRequest, opts ...grpc.CallOption) (*GetCoursesResponse, error) {
	out := new(GetCoursesResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetUsersByRole(ctx context.Context, in *GetUsersByRoleRequest, opts ...grpc.CallOption) (*GetUsersByRoleResponse, error) {
	out := new(GetUsersByRoleResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetUsersByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetCurrentAssignments(ctx context.Context, in *GetCurrentAssignmentsRequest, opts ...grpc.CallOption) (*GetCurrentAssignmentsResponse, error) {
	out := new(GetCurrentAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetCurrentAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) PostAssignment(ctx context.Context, in *PostAssignmentRequest, opts ...grpc.CallOption) (*PostAssignmentResponse, error) {
	out := new(PostAssignmentResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/PostAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetAssignedCourses(ctx context.Context, in *GetAssignedCoursesRequest, opts ...grpc.CallOption) (*GetAssignedCoursesResponse, error) {
	out := new(GetAssignedCoursesResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetAssignedCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetAssignedCourseDetailsByCourseId(ctx context.Context, in *GetAssignedCourseDetailsByCourseIdRequest, opts ...grpc.CallOption) (*GetAssignedCourseDetailsByCourseIdResponse, error) {
	out := new(GetAssignedCourseDetailsByCourseIdResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetAssignedCourseDetailsByCourseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetAssignedCourseAndMentorDetails(ctx context.Context, in *GetAssignedCourseAndMentorDetailsRequest, opts ...grpc.CallOption) (*GetAssignedCourseAndMentorDetailsResponse, error) {
	out := new(GetAssignedCourseAndMentorDetailsResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetAssignedCourseAndMentorDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) PostExercise(ctx context.Context, in *PostExerciseRequest, opts ...grpc.CallOption) (*PostExerciseResponse, error) {
	out := new(PostExerciseResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/PostExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error) {
	out := new(DeleteExerciseResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/DeleteExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetTotalNoOfExercices(ctx context.Context, in *GetTotalNoOfExercicesRequest, opts ...grpc.CallOption) (*GetTotalNoOfExercicesResponse, error) {
	out := new(GetTotalNoOfExercicesResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetTotalNoOfExercices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetSubmittedExercisesCount(ctx context.Context, in *GetSubmittedExercisesCountRequest, opts ...grpc.CallOption) (*GetSubmittedExercisesCountResponse, error) {
	out := new(GetSubmittedExercisesCountResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetSubmittedExercisesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetAssignedMenteesAndCourses(ctx context.Context, in *GetAssignedMenteesAndCoursesRequest, opts ...grpc.CallOption) (*GetAssignedMenteesAndCoursesResponse, error) {
	out := new(GetAssignedMenteesAndCoursesResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetAssignedMenteesAndCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetAssignedMenteeAndCourseDetails(ctx context.Context, in *GetAssignedMenteeAndCourseDetailsRequest, opts ...grpc.CallOption) (*GetAssignedMenteeAndCourseDetailsResponse, error) {
	out := new(GetAssignedMenteeAndCourseDetailsResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetAssignedMenteeAndCourseDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlanTrackerServiceClient) GetSubmittedExercises(ctx context.Context, in *GetSubmittedExercisesRequest, opts ...grpc.CallOption) (*GetSubmittedExercisesResponse, error) {
	out := new(GetSubmittedExercisesResponse)
	err := c.cc.Invoke(ctx, "/LearningPlanTrackerService/GetSubmittedExercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningPlanTrackerServiceServer is the server API for LearningPlanTrackerService service.
// All implementations must embed UnimplementedLearningPlanTrackerServiceServer
// for forward compatibility
type LearningPlanTrackerServiceServer interface {
	AddCourse(context.Context, *AddCourseRequest) (*AddCourseResponse, error)
	AddTopic(context.Context, *AddTopicRequest) (*AddTopicResponse, error)
	AddExercise(context.Context, *AddExerciseRequest) (*AddExerciseResponse, error)
	GetCourses(context.Context, *GetCoursesRequest) (*GetCoursesResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	GetUsersByRole(context.Context, *GetUsersByRoleRequest) (*GetUsersByRoleResponse, error)
	GetCurrentAssignments(context.Context, *GetCurrentAssignmentsRequest) (*GetCurrentAssignmentsResponse, error)
	PostAssignment(context.Context, *PostAssignmentRequest) (*PostAssignmentResponse, error)
	GetAssignedCourses(context.Context, *GetAssignedCoursesRequest) (*GetAssignedCoursesResponse, error)
	GetAssignedCourseDetailsByCourseId(context.Context, *GetAssignedCourseDetailsByCourseIdRequest) (*GetAssignedCourseDetailsByCourseIdResponse, error)
	GetAssignedCourseAndMentorDetails(context.Context, *GetAssignedCourseAndMentorDetailsRequest) (*GetAssignedCourseAndMentorDetailsResponse, error)
	PostExercise(context.Context, *PostExerciseRequest) (*PostExerciseResponse, error)
	DeleteExercise(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error)
	GetTotalNoOfExercices(context.Context, *GetTotalNoOfExercicesRequest) (*GetTotalNoOfExercicesResponse, error)
	GetSubmittedExercisesCount(context.Context, *GetSubmittedExercisesCountRequest) (*GetSubmittedExercisesCountResponse, error)
	GetAssignedMenteesAndCourses(context.Context, *GetAssignedMenteesAndCoursesRequest) (*GetAssignedMenteesAndCoursesResponse, error)
	GetAssignedMenteeAndCourseDetails(context.Context, *GetAssignedMenteeAndCourseDetailsRequest) (*GetAssignedMenteeAndCourseDetailsResponse, error)
	GetSubmittedExercises(context.Context, *GetSubmittedExercisesRequest) (*GetSubmittedExercisesResponse, error)
	mustEmbedUnimplementedLearningPlanTrackerServiceServer()
}

// UnimplementedLearningPlanTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLearningPlanTrackerServiceServer struct {
}

func (UnimplementedLearningPlanTrackerServiceServer) AddCourse(context.Context, *AddCourseRequest) (*AddCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) AddTopic(context.Context, *AddTopicRequest) (*AddTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopic not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) AddExercise(context.Context, *AddExerciseRequest) (*AddExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExercise not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetCourses(context.Context, *GetCoursesRequest) (*GetCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourses not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetUsersByRole(context.Context, *GetUsersByRoleRequest) (*GetUsersByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByRole not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetCurrentAssignments(context.Context, *GetCurrentAssignmentsRequest) (*GetCurrentAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAssignments not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) PostAssignment(context.Context, *PostAssignmentRequest) (*PostAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAssignment not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetAssignedCourses(context.Context, *GetAssignedCoursesRequest) (*GetAssignedCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedCourses not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetAssignedCourseDetailsByCourseId(context.Context, *GetAssignedCourseDetailsByCourseIdRequest) (*GetAssignedCourseDetailsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedCourseDetailsByCourseId not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetAssignedCourseAndMentorDetails(context.Context, *GetAssignedCourseAndMentorDetailsRequest) (*GetAssignedCourseAndMentorDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedCourseAndMentorDetails not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) PostExercise(context.Context, *PostExerciseRequest) (*PostExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostExercise not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) DeleteExercise(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetTotalNoOfExercices(context.Context, *GetTotalNoOfExercicesRequest) (*GetTotalNoOfExercicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNoOfExercices not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetSubmittedExercisesCount(context.Context, *GetSubmittedExercisesCountRequest) (*GetSubmittedExercisesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmittedExercisesCount not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetAssignedMenteesAndCourses(context.Context, *GetAssignedMenteesAndCoursesRequest) (*GetAssignedMenteesAndCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedMenteesAndCourses not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetAssignedMenteeAndCourseDetails(context.Context, *GetAssignedMenteeAndCourseDetailsRequest) (*GetAssignedMenteeAndCourseDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedMenteeAndCourseDetails not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) GetSubmittedExercises(context.Context, *GetSubmittedExercisesRequest) (*GetSubmittedExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmittedExercises not implemented")
}
func (UnimplementedLearningPlanTrackerServiceServer) mustEmbedUnimplementedLearningPlanTrackerServiceServer() {
}

// UnsafeLearningPlanTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningPlanTrackerServiceServer will
// result in compilation errors.
type UnsafeLearningPlanTrackerServiceServer interface {
	mustEmbedUnimplementedLearningPlanTrackerServiceServer()
}

func RegisterLearningPlanTrackerServiceServer(s grpc.ServiceRegistrar, srv LearningPlanTrackerServiceServer) {
	s.RegisterService(&LearningPlanTrackerService_ServiceDesc, srv)
}

func _LearningPlanTrackerService_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/AddCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).AddCourse(ctx, req.(*AddCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_AddTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).AddTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/AddTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).AddTopic(ctx, req.(*AddTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_AddExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).AddExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/AddExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).AddExercise(ctx, req.(*AddExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetCourses(ctx, req.(*GetCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetUsersByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetUsersByRole(ctx, req.(*GetUsersByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetCurrentAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetCurrentAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetCurrentAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetCurrentAssignments(ctx, req.(*GetCurrentAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_PostAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).PostAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/PostAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).PostAssignment(ctx, req.(*PostAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetAssignedCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetAssignedCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedCourses(ctx, req.(*GetAssignedCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetAssignedCourseDetailsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedCourseDetailsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedCourseDetailsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetAssignedCourseDetailsByCourseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedCourseDetailsByCourseId(ctx, req.(*GetAssignedCourseDetailsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetAssignedCourseAndMentorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedCourseAndMentorDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedCourseAndMentorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetAssignedCourseAndMentorDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedCourseAndMentorDetails(ctx, req.(*GetAssignedCourseAndMentorDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_PostExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).PostExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/PostExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).PostExercise(ctx, req.(*PostExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/DeleteExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).DeleteExercise(ctx, req.(*DeleteExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetTotalNoOfExercices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalNoOfExercicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetTotalNoOfExercices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetTotalNoOfExercices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetTotalNoOfExercices(ctx, req.(*GetTotalNoOfExercicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetSubmittedExercisesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmittedExercisesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetSubmittedExercisesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetSubmittedExercisesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetSubmittedExercisesCount(ctx, req.(*GetSubmittedExercisesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetAssignedMenteesAndCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedMenteesAndCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedMenteesAndCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetAssignedMenteesAndCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedMenteesAndCourses(ctx, req.(*GetAssignedMenteesAndCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetAssignedMenteeAndCourseDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedMenteeAndCourseDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedMenteeAndCourseDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetAssignedMenteeAndCourseDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetAssignedMenteeAndCourseDetails(ctx, req.(*GetAssignedMenteeAndCourseDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlanTrackerService_GetSubmittedExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmittedExercisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlanTrackerServiceServer).GetSubmittedExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningPlanTrackerService/GetSubmittedExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlanTrackerServiceServer).GetSubmittedExercises(ctx, req.(*GetSubmittedExercisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningPlanTrackerService_ServiceDesc is the grpc.ServiceDesc for LearningPlanTrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningPlanTrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LearningPlanTrackerService",
	HandlerType: (*LearningPlanTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCourse",
			Handler:    _LearningPlanTrackerService_AddCourse_Handler,
		},
		{
			MethodName: "AddTopic",
			Handler:    _LearningPlanTrackerService_AddTopic_Handler,
		},
		{
			MethodName: "AddExercise",
			Handler:    _LearningPlanTrackerService_AddExercise_Handler,
		},
		{
			MethodName: "GetCourses",
			Handler:    _LearningPlanTrackerService_GetCourses_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _LearningPlanTrackerService_AddUser_Handler,
		},
		{
			MethodName: "GetUsersByRole",
			Handler:    _LearningPlanTrackerService_GetUsersByRole_Handler,
		},
		{
			MethodName: "GetCurrentAssignments",
			Handler:    _LearningPlanTrackerService_GetCurrentAssignments_Handler,
		},
		{
			MethodName: "PostAssignment",
			Handler:    _LearningPlanTrackerService_PostAssignment_Handler,
		},
		{
			MethodName: "GetAssignedCourses",
			Handler:    _LearningPlanTrackerService_GetAssignedCourses_Handler,
		},
		{
			MethodName: "GetAssignedCourseDetailsByCourseId",
			Handler:    _LearningPlanTrackerService_GetAssignedCourseDetailsByCourseId_Handler,
		},
		{
			MethodName: "GetAssignedCourseAndMentorDetails",
			Handler:    _LearningPlanTrackerService_GetAssignedCourseAndMentorDetails_Handler,
		},
		{
			MethodName: "PostExercise",
			Handler:    _LearningPlanTrackerService_PostExercise_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _LearningPlanTrackerService_DeleteExercise_Handler,
		},
		{
			MethodName: "GetTotalNoOfExercices",
			Handler:    _LearningPlanTrackerService_GetTotalNoOfExercices_Handler,
		},
		{
			MethodName: "GetSubmittedExercisesCount",
			Handler:    _LearningPlanTrackerService_GetSubmittedExercisesCount_Handler,
		},
		{
			MethodName: "GetAssignedMenteesAndCourses",
			Handler:    _LearningPlanTrackerService_GetAssignedMenteesAndCourses_Handler,
		},
		{
			MethodName: "GetAssignedMenteeAndCourseDetails",
			Handler:    _LearningPlanTrackerService_GetAssignedMenteeAndCourseDetails_Handler,
		},
		{
			MethodName: "GetSubmittedExercises",
			Handler:    _LearningPlanTrackerService_GetSubmittedExercises_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lpt.proto",
}
