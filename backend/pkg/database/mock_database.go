// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package database is a generated GoMock package.
package database

import (
	models "lpt/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddCourse mocks base method.
func (m *MockDatabase) AddCourse(arg0 models.Course) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCourse", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCourse indicates an expected call of AddCourse.
func (mr *MockDatabaseMockRecorder) AddCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourse", reflect.TypeOf((*MockDatabase)(nil).AddCourse), arg0)
}

// AddExercise mocks base method.
func (m *MockDatabase) AddExercise(arg0 models.Exercise) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExercise", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExercise indicates an expected call of AddExercise.
func (mr *MockDatabaseMockRecorder) AddExercise(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExercise", reflect.TypeOf((*MockDatabase)(nil).AddExercise), arg0)
}

// AddTopic mocks base method.
func (m *MockDatabase) AddTopic(arg0 models.Topic) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTopic", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTopic indicates an expected call of AddTopic.
func (mr *MockDatabaseMockRecorder) AddTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTopic", reflect.TypeOf((*MockDatabase)(nil).AddTopic), arg0)
}

// AddUser mocks base method.
func (m *MockDatabase) AddUser(arg0 models.User) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabase)(nil).AddUser), arg0)
}

// CreateAssignment mocks base method.
func (m *MockDatabase) CreateAssignment(arg0 models.CoursesAssigned) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssignment", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssignment indicates an expected call of CreateAssignment.
func (mr *MockDatabaseMockRecorder) CreateAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssignment", reflect.TypeOf((*MockDatabase)(nil).CreateAssignment), arg0)
}

// DeleteExercise mocks base method.
func (m *MockDatabase) DeleteExercise(arg0, arg1 int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExercise", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExercise indicates an expected call of DeleteExercise.
func (mr *MockDatabaseMockRecorder) DeleteExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExercise", reflect.TypeOf((*MockDatabase)(nil).DeleteExercise), arg0, arg1)
}

// GetAssignedCourseDetailsByCourseId mocks base method.
func (m *MockDatabase) GetAssignedCourseDetailsByCourseId(arg0 int32) (models.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedCourseDetailsByCourseId", arg0)
	ret0, _ := ret[0].(models.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedCourseDetailsByCourseId indicates an expected call of GetAssignedCourseDetailsByCourseId.
func (mr *MockDatabaseMockRecorder) GetAssignedCourseDetailsByCourseId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedCourseDetailsByCourseId", reflect.TypeOf((*MockDatabase)(nil).GetAssignedCourseDetailsByCourseId), arg0)
}

// GetAssignedMentorDetails mocks base method.
func (m *MockDatabase) GetAssignedMentorDetails(arg0 int32, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedMentorDetails", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedMentorDetails indicates an expected call of GetAssignedMentorDetails.
func (mr *MockDatabaseMockRecorder) GetAssignedMentorDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedMentorDetails", reflect.TypeOf((*MockDatabase)(nil).GetAssignedMentorDetails), arg0, arg1)
}

// GetCourseNameById mocks base method.
func (m *MockDatabase) GetCourseNameById(arg0 int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseNameById", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseNameById indicates an expected call of GetCourseNameById.
func (mr *MockDatabaseMockRecorder) GetCourseNameById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseNameById", reflect.TypeOf((*MockDatabase)(nil).GetCourseNameById), arg0)
}

// GetProgress mocks base method.
func (m *MockDatabase) GetProgress(arg0, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockDatabaseMockRecorder) GetProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockDatabase)(nil).GetProgress), arg0, arg1)
}

// GetSubmittedExercise mocks base method.
func (m *MockDatabase) GetSubmittedExercise(arg0, arg1 int32) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmittedExercise", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubmittedExercise indicates an expected call of GetSubmittedExercise.
func (mr *MockDatabaseMockRecorder) GetSubmittedExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmittedExercise", reflect.TypeOf((*MockDatabase)(nil).GetSubmittedExercise), arg0, arg1)
}

// GetUserDetails mocks base method.
func (m *MockDatabase) GetUserDetails(arg0 int32) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockDatabaseMockRecorder) GetUserDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockDatabase)(nil).GetUserDetails), arg0)
}

// GetUserEmail mocks base method.
func (m *MockDatabase) GetUserEmail(arg0 int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockDatabaseMockRecorder) GetUserEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockDatabase)(nil).GetUserEmail), arg0)
}

// GetUserIdByEmail mocks base method.
func (m *MockDatabase) GetUserIdByEmail(arg0 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByEmail", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByEmail indicates an expected call of GetUserIdByEmail.
func (mr *MockDatabaseMockRecorder) GetUserIdByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByEmail", reflect.TypeOf((*MockDatabase)(nil).GetUserIdByEmail), arg0)
}

// ListAssignedCourses mocks base method.
func (m *MockDatabase) ListAssignedCourses(arg0 string) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignedCourses", arg0)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssignedCourses indicates an expected call of ListAssignedCourses.
func (mr *MockDatabaseMockRecorder) ListAssignedCourses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignedCourses", reflect.TypeOf((*MockDatabase)(nil).ListAssignedCourses), arg0)
}

// ListAssignedMenteesAndCourses mocks base method.
func (m *MockDatabase) ListAssignedMenteesAndCourses(arg0 int32) ([]string, []int32, []int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignedMenteesAndCourses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]int32)
	ret2, _ := ret[2].([]int32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListAssignedMenteesAndCourses indicates an expected call of ListAssignedMenteesAndCourses.
func (mr *MockDatabaseMockRecorder) ListAssignedMenteesAndCourses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignedMenteesAndCourses", reflect.TypeOf((*MockDatabase)(nil).ListAssignedMenteesAndCourses), arg0)
}

// ListCourses mocks base method.
func (m *MockDatabase) ListCourses() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListCourses")
}

// ListCourses indicates an expected call of ListCourses.
func (mr *MockDatabaseMockRecorder) ListCourses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCourses", reflect.TypeOf((*MockDatabase)(nil).ListCourses))
}

// ListCurrentAssignments mocks base method.
func (m *MockDatabase) ListCurrentAssignments() ([]models.CoursesAssigned, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrentAssignments")
	ret0, _ := ret[0].([]models.CoursesAssigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrentAssignments indicates an expected call of ListCurrentAssignments.
func (mr *MockDatabaseMockRecorder) ListCurrentAssignments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentAssignments", reflect.TypeOf((*MockDatabase)(nil).ListCurrentAssignments))
}

// ListExerciseIds mocks base method.
func (m *MockDatabase) ListExerciseIds(arg0 int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExerciseIds", arg0)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExerciseIds indicates an expected call of ListExerciseIds.
func (mr *MockDatabaseMockRecorder) ListExerciseIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExerciseIds", reflect.TypeOf((*MockDatabase)(nil).ListExerciseIds), arg0)
}

// ListSubmittedExercises mocks base method.
func (m *MockDatabase) ListSubmittedExercises(arg0 int32) ([]models.SubmittedExercises, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubmittedExercises", arg0)
	ret0, _ := ret[0].([]models.SubmittedExercises)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubmittedExercises indicates an expected call of ListSubmittedExercises.
func (mr *MockDatabaseMockRecorder) ListSubmittedExercises(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubmittedExercises", reflect.TypeOf((*MockDatabase)(nil).ListSubmittedExercises), arg0)
}

// ListSubmittedExercisesByMentee mocks base method.
func (m *MockDatabase) ListSubmittedExercisesByMentee(arg0, arg1 int32) ([]models.ListSubmittedExercisesByMentee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubmittedExercisesByMentee", arg0, arg1)
	ret0, _ := ret[0].([]models.ListSubmittedExercisesByMentee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubmittedExercisesByMentee indicates an expected call of ListSubmittedExercisesByMentee.
func (mr *MockDatabaseMockRecorder) ListSubmittedExercisesByMentee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubmittedExercisesByMentee", reflect.TypeOf((*MockDatabase)(nil).ListSubmittedExercisesByMentee), arg0, arg1)
}

// ListUsersByRole mocks base method.
func (m *MockDatabase) ListUsersByRole(arg0 int32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByRole", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByRole indicates an expected call of ListUsersByRole.
func (mr *MockDatabaseMockRecorder) ListUsersByRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByRole", reflect.TypeOf((*MockDatabase)(nil).ListUsersByRole), arg0)
}

// SubmitExercise mocks base method.
func (m *MockDatabase) SubmitExercise(arg0 models.SubmittedExercises) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitExercise", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitExercise indicates an expected call of SubmitExercise.
func (mr *MockDatabaseMockRecorder) SubmitExercise(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitExercise", reflect.TypeOf((*MockDatabase)(nil).SubmitExercise), arg0)
}
